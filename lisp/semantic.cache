;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "align.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("align-version" variable (:constant-flag t :default-value "2.61") nil [7837 7895]) ("defgroup" code nil nil [7897 7980]) ("align-load-hook" variable (:user-visible-flag t) nil [8003 8123]) ("align-indent-before-aligning" variable (:user-visible-flag t) nil [8125 8264]) ("align-default-spacing" variable (:user-visible-flag t :default-value 1) nil [8266 8628]) ("align-to-tab-stop" variable (:user-visible-flag t :default-value (quote indent-tabs-mode)) nil [8630 8846]) ("align-region-heuristic" variable (:user-visible-flag t :default-value 500) nil [8848 9357]) ("align-large-region" variable (:user-visible-flag t :default-value 10000) nil [9359 9557]) ("align-dq-string-modes" variable (:user-visible-flag t :default-value (quote (emacs-lisp-mode lisp-mode scheme-mode c++-mode c-mode java-mode perl-mode cperl-mode vhdl-mode))) nil [9559 9814]) ("align-open-comment-modes" variable (:user-visible-flag t :default-value (quote (emacs-lisp-mode lisp-mode scheme-mode c++-mode java-mode perl-mode cperl-mode makefile-mode tex-mode plain-tex-mode latex-mode slitex-mode vhdl-mode))) nil [9816 10242]) ("align-c++-modes" variable (:user-visible-flag t :default-value (quote (c++-mode c-mode java-mode))) nil [10246 10396]) ("align-perl-modes" variable (:user-visible-flag t :default-value (quote (perl-mode cperl-mode))) nil [10400 10549]) ("align-lisp-modes" variable (:user-visible-flag t :default-value (quote (emacs-lisp-mode lisp-interaction-mode lisp-mode scheme-mode))) nil [10553 10737]) ("align-tex-modes" variable (:user-visible-flag t :default-value (quote (tex-mode plain-tex-mode latex-mode slitex-mode))) nil [10741 10923]) ("align-text-modes" variable (:user-visible-flag t :default-value (quote (text-mode outline-mode))) nil [10927 11074]) ("align-region-separate" variable (:user-visible-flag t :default-value "^\\s-*[{}]?\\s-*$") nil [11078 14901]) ("put" code nil nil [14903 14955]) ("align-rules-list" variable (:user-visible-flag t :default-value (\` ((second-arg (regexp . "\\(^\\s-+[^( 	
]\\|(\\(\\S-+\\)\\s-+\\)\\S-+\\(\\s-+\\)") (group . 3) (modes . align-lisp-modes) (run-if . current-prefix-arg)) (alist-dot (regexp . "\\(\\s-*\\)\\.\\(\\s-*\\)") (group 1 2) (modes . align-lisp-modes)) (open-comment (regexp lambda (end) (re-search-forward (concat "[^ 	
\\\\]" comment-start "\\(.+\\)$") end t)) (modes . align-open-comment-modes)) (macro-definition (regexp . "^\\s-*#\\s-*define\\s-+\\S-+\\(\\s-+\\)") (modes . align-c++-modes)) (variable-declaration (regexp \, (concat "[*&0-9A-Za-z_]>?[&*]*\\(\\s-+[*&]*\\)" "[A-Za-z_][0-9A-Za-z:_]*\\s-*\\(\\()\\|" "=[^=
].*\\|(.*)\\|\\(\\[.*\\]\\)*\\)?" "\\s-*[;,]\\|)\\s-*$\\)")) (group . 1) (modes . align-c++-modes) (justify . t) (valid not (or (save-excursion (goto-char (match-beginning 1)) (backward-word 1) (looking-at "\\(goto\\|return\\|new\\|delete\\|throw\\)")) (eq (caar (c-guess-basic-syntax)) (quote c))))) (c++-assignment (regexp \, (concat "[^-=!^&*+<>/| 	
]\\(\\s-*[-=!^&*+<>/|]*\\)" "=\\(\\s-*\\)\\([^= 	
]\\|$\\)")) (group 1 2) (modes . align-c++-modes) (justify . t) (tab-stop)) (perl-assignment (regexp \` (concat "[^=!^&*-+<>/| 	
]\\(\\s-*\\)=[~>]?" "\\(\\s-*\\)\\([^>= 	
]\\|$\\)")) (group 1 2) (modes . align-perl-modes) (tab-stop)) (make-assignment (regexp . "^\\s-*\\w+\\(\\s-*\\):?=\\(\\s-*\\)\\([^	
 \\\\]\\|$\\)") (group 1 2) (modes quote (makefile-mode)) (tab-stop)) (c++-comma-delimiter (regexp . ",\\(\\s-*\\)[^/ 	
]") (repeat . t) (modes . align-c++-modes) (valid let ((syntax (caar (c-guess-basic-syntax)))) (memq syntax (quote (brace-list-intro brace-list-entry brace-entry-open))))) (perl-comma-delimiter (regexp . ",\\(\\s-*\\)[^# 	
]") (repeat . t) (modes . align-perl-modes) (run-if . current-prefix-arg)) (c++-comment (regexp . "\\(\\s-*\\)\\(//.*\\|/\\*.*\\*/\\s-*\\)$") (modes . align-c++-modes) (column . comment-column) (valid save-excursion (goto-char (match-beginning 1)) (not (bolp)))) (macro-line-continuation (regexp . "\\(\\s-*\\)\\\\$") (modes append align-c++-modes (quote (makefile-mode))) (column . c-backslash-column) (valid let ((syntax (caar (c-guess-basic-syntax)))) (or (eq syntax (quote cpp-macro)) (eq syntax (quote cpp-macro-cont))))) (c++-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\)") (modes . align-c++-modes) (valid save-excursion (goto-char (match-end 2)) (or (looking-at "\\s-*/[*/]") (looking-at "\\s-*$")))) (perl-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\|\\<and\\>\\|\\<or\\>\\)") (modes . align-perl-modes) (valid save-excursion (goto-char (match-end 2)) (or (looking-at "\\s-*#") (looking-at "\\s-*$")))) (record-separator (regexp . "\\(^\\|\\s-\\|[^\\\\]\\)&\\(\\s-*\\)") (group 1 2) (modes . align-tex-modes) (repeat . t)) (tabbing-separator (regexp . "\\(\\s-*\\)\\\\[=>]\\(\\s-*\\)") (group 1 2) (modes . align-tex-modes) (repeat . t) (run-if eq major-mode (quote latex-mode))) (record-break (regexp . "\\(\\s-*\\)\\\\\\\\") (modes . align-tex-modes)) (text-column (regexp . "\\(^\\|\\S-\\)\\(\\s-+\\)\\(\\S-\\|$\\)") (group . 2) (modes . align-text-modes) (repeat . t) (run-if and current-prefix-arg (not (eq (quote -) current-prefix-arg)))) (dollar-figure (regexp . "\\$?\\(\\s-+[0-9]+\\)\\.") (modes . align-text-modes) (justify . t) (run-if eq (quote -) current-prefix-arg)) (vhdl-declaration (regexp . "\\(signal\\|variable\\|constant\\)\\(\\s-+\\)\\S-") (group . 2) (modes quote (vhdl-mode))) (vhdl-case (regexp . "\\(others\\|[^ 	
=<]\\)\\(\\s-*\\)=>\\(\\s-*\\)\\S-") (group 2 3) (modes quote (vhdl-mode)) (valid not (string= (downcase (match-string 1)) "others"))) (vhdl-colon (regexp . "[^ 	
:]\\(\\s-*\\):\\(\\s-*\\)[^=
]") (group 1 2) (modes quote (vhdl-mode))) (direction (regexp . ":\\s-*\\(in\\|out\\|inout\\|buffer\\)\\(\\s-*\\)") (group . 2) (modes quote (vhdl-mode))) (sig-assign (regexp . "[^ 	
=<]\\(\\s-*\\)<=\\(\\s-*\\)\\S-") (group 1 2) (modes quote (vhdl-mode))) (var-assign (regexp . "[^ 	
:]\\(\\s-*\\):=") (modes quote (vhdl-mode))) (use-entity (regexp . "\\(\\s-+\\)use\\s-+entity") (modes quote (vhdl-mode)))))) nil [14957 30519]) ("put" code nil nil [30532 30589]) ("align-exclude-rules-list" variable (:user-visible-flag t :default-value (quote ((exc-dq-string (regexp . "\"\\([^\"
]+\\)\"") (repeat . t) (modes . align-dq-string-modes)) (exc-sq-string (regexp . "'\\([^'
]+\\)'") (repeat . t) (modes . align-perl-modes)) (exc-open-comment (regexp lambda (end) (re-search-forward (concat "[^ 	
\\\\]" comment-start "\\(.+\\)$") end t)) (modes . align-open-comment-modes)) (exc-c-comment (regexp . "/\\*\\(.+\\)\\*/") (repeat . t) (modes . align-c++-modes)) (exc-func-params (regexp . "(\\([^)
]+\\))") (repeat . t) (modes . align-c++-modes)) (exc-cpp-macro (regexp . "^\\s-*#\\s-*\\(if\\w*\\|endif\\)\\(.*\\)$") (group . 2) (modes . align-c++-modes))))) nil [30591 32852]) ("put" code nil nil [32854 32909]) ("align-highlight-overlays" variable nil nil [32936 33039]) ("align" function (:user-visible-flag t :arguments ("beg" "end" "&optional" "separate" "rules" "exclude-rules")) nil [33077 35101]) ("align-regexp" function (:user-visible-flag t :arguments ("beg" "end" "regexp" "&optional" "group" "spacing" "repeat")) nil [35118 37426]) ("align-entire" function (:user-visible-flag t :arguments ("beg" "end" "&optional" "rules" "exclude-rules")) nil [37443 37862]) ("align-current" function (:user-visible-flag t :arguments ("&optional" "rules" "exclude-rules")) nil [37879 38342]) ("align-highlight-rule" function (:user-visible-flag t :arguments ("beg" "end" "title" "&optional" "rules" "exclude-rules")) nil [38359 39712]) ("align-unhighlight-rule" function (:user-visible-flag t) nil [39729 40012]) ("align-new-section-p" function (:arguments ("beg" "end" "separator")) nil [40039 41029]) ("align-adjust-col-for-rule" function (:arguments ("column" "rule")) nil [41031 41873]) ("align-column" function (:arguments ("pos")) nil [41875 42112]) ("align-regions" function (:arguments ("regions" "rule" "exclude-rules")) nil [42114 43326]) ("align-areas" function (:arguments ("areas" "rule" "exclude-areas")) nil [43328 47314]) ("align-region" function (:arguments ("beg" "end" "separate" "rules" "exclude-rules" "&optional" "func")) nil [47316 59514]) ("align" package nil nil [59529 59545]) ("run-hooks" code nil nil [59547 59575]))
    :file "align.el"
    :pointmax 59602
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
