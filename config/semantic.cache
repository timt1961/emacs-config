;; Object config/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "config/"
  :tables (list 
   (semanticdb-table "planner-config.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("add-to-list" code nil nil [990 1056]) ("add-to-list" code nil nil [1057 1120]) ("add-to-list" code nil nil [1121 1185]) ("planner" include nil nil [1186 1204]) ("remember-planner" include nil nil [1206 1233]) ("setq" code nil nil [1234 1294]) ("setq" code nil nil [1295 1360]) ("planner-option-customized" code nil nil [1381 1460]) ("european-calendar" code nil nil [1478 1497]) ("setq" code nil nil [1498 1530]) ("add-hook" code nil nil [1531 1588]) ("setq" code nil nil [1589 1622]) ("planner-appt" include nil nil [1640 1663]) ("planner-appt-use-tasks-and-schedule" code nil nil [1664 1701]) ("planner-appt-insinuate" code nil nil [1702 1726]) ("emacs-wiki-config" include nil nil [2191 2219]) ("setq" code nil nil [2220 2254]) ("planner" include nil nil [2255 2273]) ("planner-emacs-wiki-install" code nil nil [2275 2303]) ("remember-config" include nil nil [2304 2330]) ("load-library" code nil nil [2347 2371]) ("load-library" code nil nil [2372 2412]) ("load-library" code nil nil [2466 2495]) ("load-library" code nil nil [2524 2557]) ("load-library" code nil nil [2588 2619]) ("load-library" code nil nil [2620 2653]) ("load-library" code nil nil [2680 2708]) ("load-library" code nil nil [2709 2746]) ("load-library" code nil nil [2781 2810]) ("load-library" code nil nil [2863 2892]) ("load-library" code nil nil [2948 2978]) ("load-library" code nil nil [2979 3015]) ("load-library" code nil nil [3016 3047]) ("load-library" code nil nil [3075 3103]) ("load-library" code nil nil [3104 3137]) ("load-library" code nil nil [3174 3208]) ("load-library" code nil nil [3209 3251]) ("load-library" code nil nil [3296 3326]) ("load-library" code nil nil [3382 3410]) ("global-set-key" code nil nil [3554 3609]) ("global-set-key" code nil nil [3610 3659]) ("global-set-key" code nil nil [3660 3705]) ("global-set-key" code nil nil [3706 3758]) ("global-set-key" code nil nil [3759 3827]) ("global-set-key" code nil nil [3828 3884]) ("define-key" code nil nil [3930 4006]) ("define-key" code nil nil [4007 4083]) ("define-key" code nil nil [4147 4214]) ("setq" code nil nil [4235 4288]) ("setq" code nil nil [4289 4364]) ("setq" code nil nil [4365 4401]) ("setq" code nil nil [4402 4447]) ("setq" code nil nil [4448 4490]) ("setq" code nil nil [4491 4531]) ("setq" code nil nil [4532 4570]) ("setq" code nil nil [4571 4610]) ("setq" code nil nil [4611 4653]) ("setq" code nil nil [4691 4738]) ("setq" code nil nil [4739 4783]) ("setq" code nil nil [4784 4831]) ("setq" code nil nil [5044 5082]) ("add-to-list" code nil nil [5084 5159]) ("add-to-list" code nil nil [5160 5238]) ("setq" code nil nil [5239 5482]) ("setq" code nil nil [5534 5572]) ("setq" code nil nil [5607 5676]) ("setq" code nil nil [5677 6359]) ("setq" code nil nil [6360 6409]) ("sacha/planner-twiddle-chronological-notes" function nil nil [6491 6987]) ("add-hook" code nil nil [6988 7060]) ("emacs-wiki-configure-highlighting" code nil nil [7130 7327]) ("emacs-wiki-highlight-verbatim-tag" function (:arguments ("around" "sacha" "activate")) nil [7328 7428]) ("setq" code nil nil [7578 7828]) ("emacs-wiki-markup-word" function (:arguments ("around" "sacha" "activate")) nil [7829 7906]) ("sacha/planner-get-diary-entries" function (:arguments ("date")) nil [8056 8699]) ("fset" code nil nil [8701 8767]) ("sacha/planner-diary-schedule-task" function (:user-visible-flag t :arguments ("start" "end")) nil [9059 10988]) ("sacha/planner-diary-add-entry" function (:user-visible-flag t :arguments ("date" "text" "&optional" "annotation")) nil [10990 11926]) ("sacha/planner-diary-unschedule-entry" function (:user-visible-flag t) nil [11928 12331]) ("sacha/planner-diary-delete-entry" function (:user-visible-flag t) nil [12333 13347]) ("define-key" code nil nil [13349 13429]) ("define-key" code nil nil [13430 13627]) ("planner-header-file" variable (:default-value "/home/sacha/notebook/wiki/.header") nil [13948 14086]) ("planner-footer-file" variable (:default-value "/home/sacha/notebook/wiki/.footer") nil [14087 14225]) ("sacha/planner-no-header-or-footer" variable (:default-value (quote ("SideBar"))) nil [14227 14327]) ("my-publishing-header" function nil nil [14329 14665]) ("my-publishing-footer" function nil nil [14669 15010]) ("emacs-wiki-next-reference" function (:arguments ("after" "emacspeak" "pre" "act" "comp")) nil [15029 15163]) ("emacs-wiki-previous-reference" function (:arguments ("after" "emacspeak" "pre" "act" "comp")) nil [15164 15302]) ("add-to-list" code nil nil [15323 15390]) ("planner-rss-add-note" function (:arguments ("around" "sacha/absolute-urls" "activate")) nil [15392 15578]) ("planner-rss-add-note" function (:arguments ("around" "sacha/norss" "activate")) nil [15580 15838]) ("sacha/rss-delete-item" function nil nil [15840 16091]) ("sacha/planner-update-note" function (:user-visible-flag t) nil [16093 16272]) ("sacha/planner-rss-undo-this-note" function (:user-visible-flag t) nil [16274 17504]) ("sacha/planner-replan-region" function (:user-visible-flag t :arguments ("beg" "end" "&optional" "page")) nil [17527 18295]) ("setq" code nil nil [18334 18680]) ("sacha/planner-note-id" function (:arguments ("info")) nil [18713 19422]) ("sacha/planner-markup-notes" function nil nil [19494 20761]) ("sacha/planner-seek-next-unfinished-and-undated-task" function (:user-visible-flag t) nil [20832 21271]) ("sacha/planner-queue-next-task" function (:user-visible-flag t :arguments ("&optional" "task-info")) nil [21273 21911]) ("sacha/planner-schedule-next-task" function (:arguments ("old-status" "new-status")) nil [21913 23010]) ("sacha/window-register" variable (:default-value "w") nil [23749 23858]) ("sacha/planner-current-task" variable nil nil [23859 23921]) ("planner-task-in-progress" function (:arguments ("after" "sacha" "activate")) nil [23922 24078]) ("sacha/planner-what-am-i-supposed-to-be-doing" function (:user-visible-flag t :arguments ("&optional" "prefix")) nil [24080 24955]) ("global-set-key" code nil nil [24957 25037]) ("sacha/planner-strip-task-numbers" function nil nil [25068 25249]) ("planner-id-image" function (:arguments ("id")) nil [25283 25458]) ("planner-id-highlight-images" function (:arguments ("beg" "end" "&optional" "verbose")) nil [25460 25921]) ("add-hook" code nil nil [25923 26079]) ("sacha/planner-score-rules" variable (:user-visible-flag t :default-value (quote (("patch" . 100) ("bug" . 100)))) nil [27045 27263]) ("sacha/planner-score-tasks-key" function nil nil [27265 27715]) ("sacha/planner-score-sort-tasks" function (:user-visible-flag t :arguments ("&optional" "new-rule")) nil [27717 28298]) ("sacha/planner-bbdb-resolve-url" function (:arguments ("id")) nil [28349 28750]) ("defalias" code nil nil [28752 28820]) ("sacha/fortune-file" variable (:user-visible-flag t :default-value "/usr/share/games/fortunes/linuxcookie") nil [28856 28949]) ("sacha/fortune-command" variable (:default-value "/usr/games/fortune") nil [28950 29027]) ("sacha/fortune" function (:user-visible-flag t :arguments ("&optional" "file")) nil [29031 29293]) ("sacha/planner-day-page-template" function nil nil [29295 29532]) ("setq" code nil nil [29534 29599]) ("add-hook" code nil nil [29663 29818]) ("sacha/planner-lj-browse" function (:arguments ("url")) nil [29850 30086]) ("sacha/planner-lj-resolve" function (:arguments ("url")) nil [30088 30310]) ("planner-add-protocol" code nil nil [30312 30390]) ("sacha/planner-w3m-annotation-from-mirror" function nil nil [30421 31137]) ("sacha/planner-w3m-mirror-browse-url" function (:arguments ("url")) nil [31139 31608]) ("add-to-list" code nil nil [31610 31695]) ("planner-add-protocol" code nil nil [31696 31768]) ("sacha/planner-markup-tasks" function nil nil [31802 33895]) ("sacha/planner-add-recent" function (:user-visible-flag t) nil [33929 35393]) ("add-hook" code nil nil [35403 35471]) ("setq" code nil nil [36276 36316]) ("sacha/planner-read-task" function nil nil [36317 36500]) ("defalias" code nil nil [36501 36555]) ("sacha/planner-delete-page" function (:user-visible-flag t) nil [36581 36929]) ("setq" code nil nil [36992 37042]) ("peter/planner-fix-tasks-after-marking" function (:arguments ("old-status" "new-status")) nil [37068 37845]) ("setq" code nil nil [37951 38118]) ("setq" code nil nil [38154 38222]) ("sacha/planner-sort-tasks-key" function nil nil [38223 38487]) ("sacha/planner-sort-tasks-basic" function nil nil [38489 39107]) ("setq" code nil nil [39109 39166]) ("sacha/planner-sort-tasks-by-date" function nil nil [39167 39970]) ("sacha/planner-invert-date" function (:arguments ("date")) nil [39972 40265]) ("planner-create-task-from-buffer" function (:arguments ("before" "cwebber" "activate")) nil [40311 40724]) ("sacha/planner-technorati-resolve" function (:arguments ("url")) nil [40755 40969]) ("sacha/planner-technorati-browse" function (:arguments ("url")) nil [40971 41198]) ("planner-add-protocol" code nil nil [41200 41302]) ("sacha/emacs-wiki-publish-this-page" function (:user-visible-flag t) nil [41322 41583]) ("define-key" code nil nil [41585 41666]) ("sacha/planner-track-finished-tasks" function (:arguments ("old-status" "new-status")) nil [41734 42269]) ("add-hook" code nil nil [42270 42340]) ("sacha/planner-podcast-browse" function (:arguments ("url")) nil [42369 42760]) ("sacha/planner-podcast-resolve" function (:arguments ("url")) nil [42763 43021]) ("sacha/planner-podcast-tag" function (:arguments ("beg" "end" "&optional" "attrs")) nil [43023 43458]) ("add-to-list" code nil nil [43461 43543]) ("planner-add-protocol" code nil nil [43545 43634]) ("planner-cyclic-create-task-maybe" function (:arguments ("around" "sacha" "activate")) nil [43675 43846]) ("sacha/planner-multi-remove-task-from-pool" function (:user-visible-flag t) nil [43863 45453]) ("planner-config" package nil nil [45467 45492]))
    :file "planner-config.el"
    :pointmax 45834
    :unmatched-syntax 'nil
    )
   (semanticdb-table "emacs-wiki-config.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("font-lock" include nil nil [1150 1170]) ("add-to-list" code nil nil [1171 1226]) ("add-to-list" code nil nil [1227 1285]) ("add-to-list" code nil nil [1286 1342]) ("load" code nil nil [1343 1397]) ("setq" code nil nil [1801 1897]) ("setq" code nil nil [1898 1953]) ("setq" code nil nil [1954 2010]) ("setq" code nil nil [2012 2057]) ("sacha/emacs-wiki-auto-publish" function nil nil [2105 2352]) ("add-hook" code nil nil [2354 2504]) ("setq" code nil nil [2517 2613]) ("setq" code nil nil [2614 3240]) ("setq" code nil nil [3241 3282]) ("setq" code nil nil [3284 3365]) ("add-to-list" code nil nil [3395 3474]) ("emacs-wiki-answer-tag" function (:arguments ("beg" "end" "highlight-p" "&optional" "attrs")) nil [3475 3793]) ("add-to-list" code nil nil [3827 3906]) ("add-to-list" code nil nil [3907 3988]) ("add-to-list" code nil nil [3989 4070]) ("emacs-wiki-grin-tag" function (:arguments ("beg" "end")) nil [4072 4133]) ("emacs-wiki-laugh-tag" function (:arguments ("beg" "end")) nil [4134 4197]) ("emacs-wiki-smile-tag" function (:arguments ("beg" "end")) nil [4198 4261]) ("sacha/emacs-wiki-use-absolute-url-flag" variable nil nil [4344 4436]) ("w3m" include nil nil [4438 4452]) ("emacs-wiki-link-url" function (:arguments ("around" "sacha" "activate")) nil [4454 5073]) ("sacha/emacs-wiki-strip-tags" function (:arguments ("string")) nil [5119 5262]) ("emacs-wiki-contents-tag" function (:arguments ("around" "sacha" "activate")) nil [5263 7016]) ("sacha/emacs-wiki-visit-link-other-window" function (:user-visible-flag t) nil [7499 7795]) ("sacha/htmlfontify-insert-region" function (:arguments ("buffer" "begin" "end")) nil [8119 9190]) ("sacha/emacs-wiki-example-tag" function (:arguments ("beg" "end" "attrs" "highlight-p")) nil [9192 10612]) ("unless" code nil nil [10614 10839]) ("emacs-wiki-configure-highlighting" code nil nil [10874 11028]) ("emacs-wiki-highlight-verbatim-tag" function (:arguments ("around" "sacha" "activate")) nil [11030 11130]) ("emacs-wiki-markup-word" function (:arguments ("around" "sacha" "activate")) nil [11132 12389]) ("sacha/emacs-wiki-perform-operation-on-link-at-point" function (:user-visible-flag t :arguments ("command")) nil [12416 12837]) ("sacha/emacs-wiki-get-base-path" function nil nil [12839 13149]) ("sacha/emacs-wiki-insert-document" function (:user-visible-flag t :arguments ("document" "title")) nil [13151 13579]) ("sacha/emacs-wiki-insert-presentation" function (:user-visible-flag t :arguments ("document" "title")) nil [13581 14119]) ("emacs-wiki-link-unescape" function (:arguments ("around" "sacha" "activate")) nil [14121 14854]) ("define-key" code nil nil [14856 14957]) ("setq" code nil nil [15015 15057]) ("sacha/emacs-wiki-marked-images-as-kill" function (:user-visible-flag t) nil [15059 15394]) ("sacha/emacs-wiki-markup-string" function (:arguments ("string")) nil [15439 15858]) ("setq" code nil nil [15883 15935]) ("my-rename-planner-files" function (:user-visible-flag t) nil [15937 16315]) ("emacs-wiki-find-file" function (:arguments ("around" "extension" "activate")) nil [16317 17588]) ("add-to-list" code nil nil [17590 17661]) ("add-to-list" code nil nil [17662 17729]) ("sacha/emacs-wiki-markup-list-or-paragraph" function nil nil [17764 19212]) ("emacs-wiki-markup-list-or-paragraph" function (:arguments ("around" "sacha" "activate")) nil [19214 19357]) ("setq" code nil nil [19359 19403]) ("emacs-wiki-config" package nil nil [19404 19432]))
    :file "emacs-wiki-config.el"
    :pointmax 19665
    )
   (semanticdb-table "remember-config.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("remember" include nil nil [407 426]) ("planner" include nil nil [427 445]) ("planner-rss" include nil nil [446 468]) ("remember-planner" include nil nil [469 496]) ("setq" code nil nil [524 564]) ("setq" code nil nil [565 625]) ("defvaralias" code nil nil [627 701]) ("ajk/my-cleanup-then-save-buffers-kill-emacs" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [703 1123]) ("defalias" code nil nil [1124 1220]) ("sacha/remember-to-notes" function (:user-visible-flag t) nil [1222 1414]) ("global-set-key" code nil nil [1416 1476]) ("remember-config" package nil nil [1478 1504]))
    :file "remember-config.el"
    :pointmax 1505
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
